# coding: utf-8

"""
    EO Data Store API

    EO Data Store Manager indexing all data hosted on a set of storages  # noqa: E501

    OpenAPI spec version: draft-3
    Contact: christophe.noel@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DatasetInfoDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'predecessors': 'int',
        'successors': 'float',
        'creation_time': 'datetime',
        'update_time': 'datetime',
        'last_access_time': 'datetime'
    }

    attribute_map = {
        'predecessors': 'predecessors',
        'successors': 'successors',
        'creation_time': 'creation-time',
        'update_time': 'update-time',
        'last_access_time': 'last-access-time'
    }

    def __init__(self, predecessors=None, successors=None, creation_time=None, update_time=None, last_access_time=None):  # noqa: E501
        """DatasetInfoDetails - a model defined in Swagger"""  # noqa: E501
        self._predecessors = None
        self._successors = None
        self._creation_time = None
        self._update_time = None
        self._last_access_time = None
        self.discriminator = None
        if predecessors is not None:
            self.predecessors = predecessors
        if successors is not None:
            self.successors = successors
        if creation_time is not None:
            self.creation_time = creation_time
        if update_time is not None:
            self.update_time = update_time
        if last_access_time is not None:
            self.last_access_time = last_access_time

    @property
    def predecessors(self):
        """Gets the predecessors of this DatasetInfoDetails.  # noqa: E501

        Number of previous versions currently available (maintained by the data store)  # noqa: E501

        :return: The predecessors of this DatasetInfoDetails.  # noqa: E501
        :rtype: int
        """
        return self._predecessors

    @predecessors.setter
    def predecessors(self, predecessors):
        """Sets the predecessors of this DatasetInfoDetails.

        Number of previous versions currently available (maintained by the data store)  # noqa: E501

        :param predecessors: The predecessors of this DatasetInfoDetails.  # noqa: E501
        :type: int
        """

        self._predecessors = predecessors

    @property
    def successors(self):
        """Gets the successors of this DatasetInfoDetails.  # noqa: E501

        Number of succeeding versions  (0 if the dataset is the last version)  # noqa: E501

        :return: The successors of this DatasetInfoDetails.  # noqa: E501
        :rtype: float
        """
        return self._successors

    @successors.setter
    def successors(self, successors):
        """Sets the successors of this DatasetInfoDetails.

        Number of succeeding versions  (0 if the dataset is the last version)  # noqa: E501

        :param successors: The successors of this DatasetInfoDetails.  # noqa: E501
        :type: float
        """

        self._successors = successors

    @property
    def creation_time(self):
        """Gets the creation_time of this DatasetInfoDetails.  # noqa: E501

        Creation time of the data store dataset record.  # noqa: E501

        :return: The creation_time of this DatasetInfoDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DatasetInfoDetails.

        Creation time of the data store dataset record.  # noqa: E501

        :param creation_time: The creation_time of this DatasetInfoDetails.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def update_time(self):
        """Gets the update_time of this DatasetInfoDetails.  # noqa: E501

        Last update time of the data store dataset record.  # noqa: E501

        :return: The update_time of this DatasetInfoDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this DatasetInfoDetails.

        Last update time of the data store dataset record.  # noqa: E501

        :param update_time: The update_time of this DatasetInfoDetails.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def last_access_time(self):
        """Gets the last_access_time of this DatasetInfoDetails.  # noqa: E501

        Last read access time of the data store dataset record.  # noqa: E501

        :return: The last_access_time of this DatasetInfoDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._last_access_time

    @last_access_time.setter
    def last_access_time(self, last_access_time):
        """Sets the last_access_time of this DatasetInfoDetails.

        Last read access time of the data store dataset record.  # noqa: E501

        :param last_access_time: The last_access_time of this DatasetInfoDetails.  # noqa: E501
        :type: datetime
        """

        self._last_access_time = last_access_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatasetInfoDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetInfoDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
