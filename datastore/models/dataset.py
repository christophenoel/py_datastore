# coding: utf-8

"""
    EO Data Store API

    EO Data Store Manager indexing all data hosted on a set of storages  # noqa: E501

    OpenAPI spec version: draft-3
    Contact: christophe.noel@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from datastore.models.dataset_description import DatasetDescription  # noqa: F401,E501

class Dataset(DatasetDescription):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'details': 'DatasetInfoDetails',
        'product_metadata': 'ProductProperties',
        'generic_metadata': 'GenericDataProperties'
    }
    if hasattr(DatasetDescription, "swagger_types"):
        swagger_types.update(DatasetDescription.swagger_types)

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'details': 'details',
        'product_metadata': 'product-metadata',
        'generic_metadata': 'generic-metadata'
    }
    if hasattr(DatasetDescription, "attribute_map"):
        attribute_map.update(DatasetDescription.attribute_map)

    def __init__(self, id=None, type=None, details=None, product_metadata=None, generic_metadata=None, *args, **kwargs):  # noqa: E501
        """Dataset - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._details = None
        self._product_metadata = None
        self._generic_metadata = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if details is not None:
            self.details = details
        if product_metadata is not None:
            self.product_metadata = product_metadata
        if generic_metadata is not None:
            self.generic_metadata = generic_metadata
        DatasetDescription.__init__(self, *args, **kwargs)

    @property
    def id(self):
        """Gets the id of this Dataset.  # noqa: E501

        Dataset identifier  # noqa: E501

        :return: The id of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dataset.

        Dataset identifier  # noqa: E501

        :param id: The id of this Dataset.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Dataset.  # noqa: E501

        Dataset type common to this group (product or generic)  # noqa: E501

        :return: The type of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Dataset.

        Dataset type common to this group (product or generic)  # noqa: E501

        :param type: The type of this Dataset.  # noqa: E501
        :type: str
        """
        allowed_values = ["generic", "product"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def details(self):
        """Gets the details of this Dataset.  # noqa: E501


        :return: The details of this Dataset.  # noqa: E501
        :rtype: DatasetInfoDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Dataset.


        :param details: The details of this Dataset.  # noqa: E501
        :type: DatasetInfoDetails
        """

        self._details = details

    @property
    def product_metadata(self):
        """Gets the product_metadata of this Dataset.  # noqa: E501


        :return: The product_metadata of this Dataset.  # noqa: E501
        :rtype: ProductProperties
        """
        return self._product_metadata

    @product_metadata.setter
    def product_metadata(self, product_metadata):
        """Sets the product_metadata of this Dataset.


        :param product_metadata: The product_metadata of this Dataset.  # noqa: E501
        :type: ProductProperties
        """

        self._product_metadata = product_metadata

    @property
    def generic_metadata(self):
        """Gets the generic_metadata of this Dataset.  # noqa: E501


        :return: The generic_metadata of this Dataset.  # noqa: E501
        :rtype: GenericDataProperties
        """
        return self._generic_metadata

    @generic_metadata.setter
    def generic_metadata(self, generic_metadata):
        """Sets the generic_metadata of this Dataset.


        :param generic_metadata: The generic_metadata of this Dataset.  # noqa: E501
        :type: GenericDataProperties
        """

        self._generic_metadata = generic_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dataset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
