# coding: utf-8

"""
    EO Data Store API

    EO Data Store Manager indexing all data hosted on a set of storages  # noqa: E501

    OpenAPI spec version: draft-3
    Contact: christophe.noel@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'browse_path': 'str',
        'begin_acquisition': 'datetime',
        'end_acquisition': 'datetime',
        'footprint': 'str',
        'orbit_number': 'int',
        'orbit_direction': 'str',
        'processor_name': 'str',
        'processor_version': 'str',
        'processing_level': 'str',
        'processing_mode': 'str',
        'tbd': 'object'
    }

    attribute_map = {
        'browse_path': 'browse-path',
        'begin_acquisition': 'beginAcquisition',
        'end_acquisition': 'endAcquisition',
        'footprint': 'footprint',
        'orbit_number': 'orbitNumber',
        'orbit_direction': 'orbitDirection',
        'processor_name': 'processorName',
        'processor_version': 'processorVersion',
        'processing_level': 'processingLevel',
        'processing_mode': 'processingMode',
        'tbd': 'TBD'
    }

    def __init__(self, browse_path=None, begin_acquisition=None, end_acquisition=None, footprint=None, orbit_number=None, orbit_direction=None, processor_name=None, processor_version=None, processing_level=None, processing_mode=None, tbd=None):  # noqa: E501
        """ProductProperties - a model defined in Swagger"""  # noqa: E501
        self._browse_path = None
        self._begin_acquisition = None
        self._end_acquisition = None
        self._footprint = None
        self._orbit_number = None
        self._orbit_direction = None
        self._processor_name = None
        self._processor_version = None
        self._processing_level = None
        self._processing_mode = None
        self._tbd = None
        self.discriminator = None
        if browse_path is not None:
            self.browse_path = browse_path
        if begin_acquisition is not None:
            self.begin_acquisition = begin_acquisition
        if end_acquisition is not None:
            self.end_acquisition = end_acquisition
        if footprint is not None:
            self.footprint = footprint
        if orbit_number is not None:
            self.orbit_number = orbit_number
        if orbit_direction is not None:
            self.orbit_direction = orbit_direction
        if processor_name is not None:
            self.processor_name = processor_name
        if processor_version is not None:
            self.processor_version = processor_version
        if processing_level is not None:
            self.processing_level = processing_level
        if processing_mode is not None:
            self.processing_mode = processing_mode
        if tbd is not None:
            self.tbd = tbd

    @property
    def browse_path(self):
        """Gets the browse_path of this ProductProperties.  # noqa: E501

        Absolute path of the quicklook image  # noqa: E501

        :return: The browse_path of this ProductProperties.  # noqa: E501
        :rtype: str
        """
        return self._browse_path

    @browse_path.setter
    def browse_path(self, browse_path):
        """Sets the browse_path of this ProductProperties.

        Absolute path of the quicklook image  # noqa: E501

        :param browse_path: The browse_path of this ProductProperties.  # noqa: E501
        :type: str
        """

        self._browse_path = browse_path

    @property
    def begin_acquisition(self):
        """Gets the begin_acquisition of this ProductProperties.  # noqa: E501


        :return: The begin_acquisition of this ProductProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._begin_acquisition

    @begin_acquisition.setter
    def begin_acquisition(self, begin_acquisition):
        """Sets the begin_acquisition of this ProductProperties.


        :param begin_acquisition: The begin_acquisition of this ProductProperties.  # noqa: E501
        :type: datetime
        """

        self._begin_acquisition = begin_acquisition

    @property
    def end_acquisition(self):
        """Gets the end_acquisition of this ProductProperties.  # noqa: E501


        :return: The end_acquisition of this ProductProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._end_acquisition

    @end_acquisition.setter
    def end_acquisition(self, end_acquisition):
        """Sets the end_acquisition of this ProductProperties.


        :param end_acquisition: The end_acquisition of this ProductProperties.  # noqa: E501
        :type: datetime
        """

        self._end_acquisition = end_acquisition

    @property
    def footprint(self):
        """Gets the footprint of this ProductProperties.  # noqa: E501

        Sequence of point expressed as latitude/longitude pairs using CRS WGS.     Last point is equal to first point (see product definition)  # noqa: E501

        :return: The footprint of this ProductProperties.  # noqa: E501
        :rtype: str
        """
        return self._footprint

    @footprint.setter
    def footprint(self, footprint):
        """Sets the footprint of this ProductProperties.

        Sequence of point expressed as latitude/longitude pairs using CRS WGS.     Last point is equal to first point (see product definition)  # noqa: E501

        :param footprint: The footprint of this ProductProperties.  # noqa: E501
        :type: str
        """

        self._footprint = footprint

    @property
    def orbit_number(self):
        """Gets the orbit_number of this ProductProperties.  # noqa: E501


        :return: The orbit_number of this ProductProperties.  # noqa: E501
        :rtype: int
        """
        return self._orbit_number

    @orbit_number.setter
    def orbit_number(self, orbit_number):
        """Sets the orbit_number of this ProductProperties.


        :param orbit_number: The orbit_number of this ProductProperties.  # noqa: E501
        :type: int
        """

        self._orbit_number = orbit_number

    @property
    def orbit_direction(self):
        """Gets the orbit_direction of this ProductProperties.  # noqa: E501


        :return: The orbit_direction of this ProductProperties.  # noqa: E501
        :rtype: str
        """
        return self._orbit_direction

    @orbit_direction.setter
    def orbit_direction(self, orbit_direction):
        """Sets the orbit_direction of this ProductProperties.


        :param orbit_direction: The orbit_direction of this ProductProperties.  # noqa: E501
        :type: str
        """

        self._orbit_direction = orbit_direction

    @property
    def processor_name(self):
        """Gets the processor_name of this ProductProperties.  # noqa: E501

        Name of the processor  # noqa: E501

        :return: The processor_name of this ProductProperties.  # noqa: E501
        :rtype: str
        """
        return self._processor_name

    @processor_name.setter
    def processor_name(self, processor_name):
        """Sets the processor_name of this ProductProperties.

        Name of the processor  # noqa: E501

        :param processor_name: The processor_name of this ProductProperties.  # noqa: E501
        :type: str
        """

        self._processor_name = processor_name

    @property
    def processor_version(self):
        """Gets the processor_version of this ProductProperties.  # noqa: E501

        Version of the processor  # noqa: E501

        :return: The processor_version of this ProductProperties.  # noqa: E501
        :rtype: str
        """
        return self._processor_version

    @processor_version.setter
    def processor_version(self, processor_version):
        """Sets the processor_version of this ProductProperties.

        Version of the processor  # noqa: E501

        :param processor_version: The processor_version of this ProductProperties.  # noqa: E501
        :type: str
        """

        self._processor_version = processor_version

    @property
    def processing_level(self):
        """Gets the processing_level of this ProductProperties.  # noqa: E501


        :return: The processing_level of this ProductProperties.  # noqa: E501
        :rtype: str
        """
        return self._processing_level

    @processing_level.setter
    def processing_level(self, processing_level):
        """Sets the processing_level of this ProductProperties.


        :param processing_level: The processing_level of this ProductProperties.  # noqa: E501
        :type: str
        """

        self._processing_level = processing_level

    @property
    def processing_mode(self):
        """Gets the processing_mode of this ProductProperties.  # noqa: E501

        Used for L2 only (NRT, CP, tbd)  # noqa: E501

        :return: The processing_mode of this ProductProperties.  # noqa: E501
        :rtype: str
        """
        return self._processing_mode

    @processing_mode.setter
    def processing_mode(self, processing_mode):
        """Sets the processing_mode of this ProductProperties.

        Used for L2 only (NRT, CP, tbd)  # noqa: E501

        :param processing_mode: The processing_mode of this ProductProperties.  # noqa: E501
        :type: str
        """

        self._processing_mode = processing_mode

    @property
    def tbd(self):
        """Gets the tbd of this ProductProperties.  # noqa: E501

        TO BE COMPLETED (currently not an exhaustive list of queryables)    # noqa: E501

        :return: The tbd of this ProductProperties.  # noqa: E501
        :rtype: object
        """
        return self._tbd

    @tbd.setter
    def tbd(self, tbd):
        """Sets the tbd of this ProductProperties.

        TO BE COMPLETED (currently not an exhaustive list of queryables)    # noqa: E501

        :param tbd: The tbd of this ProductProperties.  # noqa: E501
        :type: object
        """

        self._tbd = tbd

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
